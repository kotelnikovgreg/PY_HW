"""
    1. Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной платы сотрудника.
    Используйте в нём формулу: (выработка в часах*ставка в час) + премия.
    Во время выполнения расчёта для конкретных значений необходимо запускать скрипт с параметрами.
"""

# HW_4\pay_check.py
# В терминал вводил cd для перехода в HW_4 и далее 'python pay_check.py 40 10 100'

"""
    2. Представлен список чисел. Необходимо вывести элементы исходного списка, 
    значения которых больше предыдущего элемента.
    Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. 
    Для его формирования используйте генератор.
    Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
    Результат: [12, 44, 4, 10, 78, 123].
"""

# # У первого элемента нет предыдущего, поэтому 300 тоже войдет в новый список
# my_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
# new_list = [my_list[i] for i in range(len(my_list)) if my_list[i] > my_list[i - 1]]
# print(f"Исходный список: {my_list}")
# print(f"Новый список: {new_list}")

"""
    3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Решите задание в одну строку.
    Подсказка: используйте функцию range() и генератор.
"""

# print([num for num in range(20, 241) if num % 20 == 0 or num % 21 == 0])

"""
    4. Представлен список чисел. Определите элементы списка, не имеющие повторений. 
    Сформируйте итоговый массив чисел, соответствующих требованию. 
    Элементы выведите в порядке их следования в исходном списке. 
    Для выполнения задания обязательно используйте генератор.
    Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
    Результат: [23, 1, 3, 10, 4, 11]
"""

# my_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
# new_list = [el for el in my_list if my_list.count(el) == 1]
# print(f"Исходный список: {my_list}")
# print(f"Новый список: {new_list}")

"""
    5. Реализовать формирование списка, используя функцию range() и возможности генератора. 
    В список должны войти чётные числа от 100 до 1000 (включая границы). 
    Нужно получить результат вычисления произведения всех элементов списка.
    Подсказка: использовать функцию reduce().
"""

# from functools import reduce
#
# num_list = [el for el in range(100, 1000, 2)]
# print(reduce(lambda el_a, el_b: el_a * el_b, num_list))

"""
    6. Реализовать два небольших скрипта:
    итератор, генерирующий целые числа, начиная с указанного;
    итератор, повторяющий элементы некоторого списка, определённого заранее. 
    Подсказка: используйте функцию count() и cycle() модуля itertools. 
    Обратите внимание, что создаваемый цикл не должен быть бесконечным. 
    Предусмотрите условие его завершения. #### Например, в первом задании выводим целые числа, начиная с 3. 
    При достижении числа 10 — завершаем цикл. Вторым пунктом необходимо предусмотреть условие, 
    при котором повторение элементов списка прекратится.
"""

# from itertools import count
# from itertools import cycle
#
# count_list = []
# cycle_list = []
# for el in count(3):
#     if el > 10:
#         break
#     else:
#         count_list.append(el)
# print(count_list)
#
# с = 0
# for el in cycle(count_list):
#     if с > 10:
#         break
#     cycle_list.append(el)
#     с += 1
# print(cycle_list)

"""
    7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. 
    При вызове функции должен создаваться объект-генератор. 
    Функция вызывается следующим образом: for el in fact(n).
    Она отвечает за получение факториала числа. В цикле нужно выводить только первые n чисел, начиная с 1! и до n!.
"""

# from math import factorial as fact
# from itertools import count
#
#
# def generator(n):
#     for el in count(1):
#         if el >= n:
#             break
#         else:
#             gen_fact = fact(el)
#         yield gen_fact
#
#
# for el in generator(5):
#     print(el)
